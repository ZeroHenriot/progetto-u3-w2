// import { useEffect, useState } from 'react'
// import { Card, Col, Container, Row } from 'react-bootstrap'
// import { CloudsFill, CloudyFill } from 'react-bootstrap-icons'
// import { useLocation } from 'react-router-dom'

// const Weather = () => {
//   const [weather, setWeather] = useState({
//     location: '',
//     temperature: '',
//     maxTemperature: '',
//     minTemperature: '',
//     description: '',
//     condition: '',
//   })
//   const location = useLocation()
//   console.log('il tuo oggetto', weather)
//   //   console.log(location.search)
//   const url = `https://api.openweathermap.org/data/2.5/forecast/${location.search}&appid=`
//   const key = '2675b5f67ebe6be86ee8d73fdee7f98c&units=metric'

//   //   console.log(url)

//   useEffect(() => {
//     getWeather()
//   }, [])

//   const getWeather = () => {
//     fetch(url + key)
//       .then((res) => {
//         if (res.ok) {
//           return res.json()
//         } else {
//           throw new Error('Hai avuto un errore nel recupero del meteo')
//         }
//       })
//       .then((data) => {
//         const locationName = data.city.name

//         const updatedWeatherData = data.list.map((item) => ({
//           temperature: Math.trunc(item.main.temp),
//           maxTemperature: Math.trunc(item.main.temp_max),
//           minTemperature: Math.trunc(item.main.temp_min),
//           description: item.weather[0].description,
//           condition: item.weather[0].main,
//         }))

//         setWeather((prevWeather) => ({
//           ...prevWeather,
//           location: locationName,
//           weatherData: updatedWeatherData,
//         }))
//       })
//       .catch((err) => {
//         console.log('Hai avuto un errore', err)
//       })
//   }
//   return (
//     <>
//       <Container className="h-100 d-flex flex-column align-items-center">
//         <Row className="justify-content-center w-100">
//           <Col xs={6} md={4}>
//             <Card>
//               <Card.Body>
//                 <Card.Title className="fs-1">{weather.location}</Card.Title>
//                 <Card.Text>
//                   <div className="d-flex justify-content-between mt-3 fs-5">
//                     <span className="d-flex align-items-center">
//                       {weather.condition
//                         .toLowerCase()
//                         .includes('Clouds'.toLowerCase()) ? (
//                         <CloudsFill color="" className="me-1" size={'20px'} />
//                       ) : (
//                         ''
//                       )}
//                       {weather.description.charAt(0).toUpperCase() +
//                         weather.description.slice(1)}
//                     </span>
//                     <span className="d-flex align-items-center">
//                       {weather.condition
//                         .toLowerCase()
//                         .includes('Clouds'.toLowerCase()) ? (
//                         <CloudsFill color="" className="me-1" size={'20px'} />
//                       ) : (
//                         ''
//                       )}
//                       {weather.condition}
//                     </span>
//                   </div>
//                   <div className="d-flex justify-content-between mt-2 fs-5">
//                     <span>{weather.temperature}°</span>
//                     <span>Max: {weather.maxTemperature}°</span>
//                     <span>Min: {weather.minTemperature}°</span>
//                   </div>
//                 </Card.Text>
//               </Card.Body>
//             </Card>
//           </Col>
//         </Row>
//       </Container>
//     </>
//   )
// }
// export default Weather
